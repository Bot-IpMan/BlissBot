#!/usr/bin/env python3
"""
–†–æ–±–æ—á–∏–π –ø—Ä–∏–∫–ª–∞–¥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ BlissOS —á–µ—Ä–µ–∑ Appium
"""

import requests
import json
import time
from appium import webdriver
from appium.options.android import UiAutomator2Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

class BlissBotController:
    def __init__(self, appium_url="http://localhost:4723", emulator_host="172.26.209.4"):
        self.appium_url = appium_url
        self.emulator_host = emulator_host
        self.driver = None
        
    def setup_driver(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –µ–º—É–ª—è—Ç–æ—Ä–∞"""
        
        # –û–ø—Ü—ñ—ó –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ BlissOS
        options = UiAutomator2Options()
        options.platform_name = "Android"
        options.device_name = "BlissOS_Emulator"
        
        # –í–∞–∂–ª–∏–≤–æ: –≤–∫–∞–∑—É—î–º–æ IP –µ–º—É–ª—è—Ç–æ—Ä–∞
        options.udid = f"{self.emulator_host}:5555"
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è BlissOS
        options.automation_name = "UiAutomator2"
        options.new_command_timeout = 300
        options.no_reset = True  # –ù–µ —Å–∫–∏–¥–∞—Ç–∏ —Å—Ç–∞–Ω –¥–æ–¥–∞—Ç–∫—ñ–≤
        
        try:
            print(f"üîÑ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –µ–º—É–ª—è—Ç–æ—Ä–∞ {self.emulator_host}...")
            self.driver = webdriver.Remote(
                command_executor=f"{self.appium_url}",
                options=options
            )
            print("‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –µ–º—É–ª—è—Ç–æ—Ä–∞!")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            return False
    
    def test_connection(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"""
        if not self.driver:
            return False
            
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π
            print("üì± –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π:")
            print(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {self.driver.capabilities.get('platformName')}")
            print(f"   –í–µ—Ä—Å—ñ—è: {self.driver.capabilities.get('platformVersion')}")
            print(f"   –ü—Ä–∏—Å—Ç—Ä—ñ–π: {self.driver.capabilities.get('deviceName')}")
            
            # –†–æ–±–∏–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
            screenshot_path = "/opt/appium/screenshots/test_connection.png"
            self.driver.save_screenshot(screenshot_path)
            print(f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {screenshot_path}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
            return False
    
    def open_settings(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å Android"""
        try:
            print("üîß –í—ñ–¥–∫—Ä–∏–≤–∞—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è...")
            
            # –ú–µ—Ç–æ–¥ 1: –ß–µ—Ä–µ–∑ intent
            self.driver.start_activity("com.android.settings", ".Settings")
            time.sleep(3)
            
            print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {e}")
            
            # –ú–µ—Ç–æ–¥ 2: –ß–µ—Ä–µ–∑ –ø–æ—à—É–∫ –ø–æ —Ç–µ–∫—Å—Ç—É
            try:
                print("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥...")
                
                # –°–≤–∞–π–ø –≤–Ω–∏–∑ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
                self.driver.swipe(500, 100, 500, 600, 1000)
                time.sleep(1)
                
                # –ü–æ—à—É–∫ —ñ–∫–æ–Ω–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
                settings_button = self.driver.find_element(
                    By.XPATH, 
                    "//*[@content-desc='Settings' or contains(@text,'Settings') or contains(@text,'–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')]"
                )
                settings_button.click()
                
                print("‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–º –º–µ—Ç–æ–¥–æ–º!")
                return True
                
            except Exception as e2:
                print(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Ç–∞–∫–æ–∂ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e2}")
                return False
    
    def open_calculator(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ —Ç–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è 15 + 25"""
        try:
            print("üßÆ –í—ñ–¥–∫—Ä–∏–≤–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä...")
            
            # –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –ø–∞–∫–µ—Ç–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            calculator_packages = [
                ("com.android.calculator2", ".Calculator"),
                ("com.google.android.calculator", ".Calculator"),
                ("com.sec.android.app.popupcalculator", ".Calculator"),
            ]
            
            for package, activity in calculator_packages:
                try:
                    self.driver.start_activity(package, activity)
                    time.sleep(2)
                    print(f"‚úÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–æ: {package}")
                    break
                except:
                    continue
            else:
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ —á–µ—Ä–µ–∑ activity, —à—É–∫–∞—î–º–æ –Ω–∞ —Ä–æ–±–æ—á–æ–º—É —Å—Ç–æ–ª—ñ
                print("üîç –®—É–∫–∞—é –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–∞ —Ä–æ–±–æ—á–æ–º—É —Å—Ç–æ–ª—ñ...")
                calc_icon = self.driver.find_element(
                    By.XPATH,
                    "//*[contains(@text,'Calculator') or contains(@text,'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä') or @content-desc='Calculator']"
                )
                calc_icon.click()
                time.sleep(2)
            
            # –û–±—á–∏—Å–ª–µ–Ω–Ω—è 15 + 25
            print("üî¢ –í–∏–∫–æ–Ω—É—é –æ–±—á–∏—Å–ª–µ–Ω–Ω—è 15 + 25...")
            
            # –ù–∞—Ç–∏—Å–∫–∞—î–º–æ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó
            buttons_to_press = ['1', '5', '+', '2', '5', '=']
            
            for button in buttons_to_press:
                try:
                    # –®—É–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ —Ç–µ–∫—Å—Ç—É –∞–±–æ content-desc
                    calc_button = self.driver.find_element(
                        By.XPATH,
                        f"//*[@text='{button}' or @content-desc='{button}']"
                    )
                    calc_button.click()
                    time.sleep(0.5)
                    print(f"   –ù–∞—Ç–∏—Å–Ω—É—Ç–æ: {button}")
                    
                except Exception as e:
                    print(f"   ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ {button}: {e}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            try:
                result_element = self.driver.find_element(
                    By.XPATH,
                    "//*[contains(@resource-id,'result') or contains(@resource-id,'display')]"
                )
                result = result_element.text
                print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            except:
                print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º: {e}")
            return False
    
    def take_screenshot(self, name="screenshot"):
        """–†–æ–±–∏—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç"""
        if self.driver:
            screenshot_path = f"/opt/appium/screenshots/{name}_{int(time.time())}.png"
            self.driver.save_screenshot(screenshot_path)
            print(f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {screenshot_path}")
            return screenshot_path
        return None
    
    def cleanup(self):
        """–ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è"""
        if self.driver:
            self.driver.quit()
            print("üîö –ó'—î–¥–Ω–∞–Ω–Ω—è –∑–∞–∫—Ä–∏—Ç–æ")

def main():
    print("ü§ñ BlissBot - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Android")
    print("=" * 50)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
    bot = BlissBotController()
    
    try:
        # 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if not bot.setup_driver():
            print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –µ–º—É–ª—è—Ç–æ—Ä–∞")
            return
        
        # 2. –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        if not bot.test_connection():
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∏ –∑ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è–º –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
            return
        
        # 3. –†–æ–±–∏–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        bot.take_screenshot("initial_state")
        
        # 4. –¢–µ—Å—Ç—É—î–º–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
        print("\n" + "="*30)
        if bot.open_settings():
            bot.take_screenshot("settings_opened")
            time.sleep(2)
        
        # 5. –¢–µ—Å—Ç—É—î–º–æ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
        print("\n" + "="*30)
        if bot.open_calculator():
            bot.take_screenshot("calculator_result")
        
        print("\n‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        
    finally:
        bot.cleanup()

if __name__ == "__main__":
    main()
